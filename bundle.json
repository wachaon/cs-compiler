{
  "{8127B88F-A2AB-48EA-9214-8E5D1D0E1931}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { writeFileSync, existsFileSync, deleteFileSync } = require('filesystem')\r\nconst { resolve } = require('pathname')\r\nconst { unnamed } = require('argv')\r\nconst { search } = require('match')\r\nconst { SPACE } = require('text')\r\nconst genGUID = require('genGUID')\r\nconst isCLI = require('isCLI')\r\n\r\nconst DOT = '.'\r\nconst DOUBLE_QUOTE = '\"'\r\n\r\nif (isCLI(__filename)) execute(...unnamed.slice(1))\r\nelse module.exports = {\r\n    compile,\r\n    execute\r\n}\r\n\r\nfunction compile(source, spec = resolve(process.cwd(), genGUID() + '.cs')) {\r\n    const compiler = getCompiler()\r\n    console.debug(writeFileSync(spec, source, 'UTF-8'))\r\n\r\n    try {\r\n        const comp = WShell.Exec(`cmd /c ${compiler} ${spec}`)\r\n\r\n        let i = 0\r\n        while (comp.Status == 0) {\r\n            console.weaklog(`compiling${DOT.repeat(i++ % 4)}`)\r\n            WScript.Sleep(100)\r\n        }\r\n\r\n        let out, err\r\n        if (out = comp.StdOut.ReadAll()) console.log(out)\r\n        if (err = comp.StdErr.ReadAll()) console.log(err)\r\n\r\n        return spec\r\n    } catch (e) {\r\n        throw e\r\n    } finally {\r\n        if (existsFileSync(spec)) console.debug(deleteFileSync(spec))\r\n    }\r\n}\r\n\r\nfunction execute(spec, ...args) {\r\n    const comp = WShell.Exec(['cmd', '/c', spec, ...sanitize(args)].join(SPACE))\r\n\r\n    let i = 0\r\n    while (comp.Status == 0) {\r\n        console.weaklog(`executing${DOT.repeat(i++ % 4)}`)\r\n        WScript.Sleep(100)\r\n    }\r\n\r\n    let out, err\r\n    if (out = comp.StdOut.ReadAll()) console.log(out)\r\n    if (err = comp.StdErr.ReadAll()) console.log(err)\r\n}\r\n\r\nfunction getCompiler() {\r\n    return search('**/csc.exe', 'C:/Windows/Microsoft.NET/Framework').slice(-1)[0]\r\n}\r\n\r\nfunction sanitize(values) {\r\n    return values.map(value => {\r\n        if (typeof value === 'string')\r\n            return DOUBLE_QUOTE + value.replace(/\"/g, DOUBLE_QUOTE.repeat(2)) + DOUBLE_QUOTE\r\n        return value\r\n    })\r\n}\r\n",
    "mapping": {},
    "path": "{cs-compiler}/index.js"
  },
  "{5E9F3416-291E-435F-9061-3FBA1A6B68C5}": {
    "source": "{\n    \"name\": \"cs-compiler\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Compile C# source\",\n    \"main\": \"index.js\",\n    \"repository\": \"https://github.com/wachaon/cs-compiler.git\",\n    \"keywords\": [\n        \"C#\",\n        \"compile\"\n    ],\n    \"author\": \"wachaon\",\n    \"license\": \"MIT\"\n}",
    "path": "{cs-compiler}/package.json"
  },
  "{FD62F006-AC7C-4067-A963-1DB906BB5DE0}": {
    "source": "# cs-compiler\r\n\r\n*cs-compiler* は *C#* のソースコードのコンパイルや実行をサポートする。[*wes*](https://github.com/wachaon/wes)\r\n 用のパッケージになります。\r\n\r\n ## インストール\r\n\r\n ```bat\r\n wes install @wachaon/cs-compiler\r\n ```\r\n\r\n ## 用法\r\n\r\n(`replaceExt()` は *wes* の *version* が `0.13.21` 以上が必要です。)\r\n\r\n ```javascript\r\nconst { compile, execute } = require('/index')\r\nconst { replaceExt, resolve } = require('pathname')\r\nconst { download, existsFileSync, deleteFileSync } = require('filesystem')\r\n\r\nconst source = `using System.Media;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        SoundPlayer player = new SoundPlayer(args[0]);\r\n        player.PlaySync();\r\n    }\r\n}`\r\n\r\nconst media = 'https://www.ne.jp/asahi/music/myuu/wave/fanfare.wav'\r\nconst dist = resolve(process.cwd(), media.split('/').slice(-1)[0])\r\nconst csharp = compile(source)\r\nconst player = replaceExt(csharp, '.exe')\r\ndownload(media, dist)\r\nexecute(player, dist)\r\nif (existsFileSync(player)) console.info(deleteFileSync(player))\r\nif (existsFileSync(dist)) console.info(deleteFileSync(dist))\r\n ```",
    "mapping": {},
    "path": "{cs-compiler}/README.md"
  },
  "{1454704A-4EAC-4176-8EF8-12094B52DBE0}": {
    "source": "MIT License\r\n\r\nCopyright (c) 2023 wachaon\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
    "mapping": {},
    "path": "{cs-compiler}/LICENSE"
  }
}